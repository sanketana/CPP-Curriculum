Step-by-Step Development of Tic-Tac-Toe

	1.	Checkpoint 1: Displaying the Board
	•	Display the Tic-Tac-Toe board with placeholder numbers (1-9).
	•	Focus on creating a neat and user-friendly visual layout.
	•	No player interaction yet.
	2.	Checkpoint 2: Collecting Player Input
	•	Allow players to choose a cell by entering a number (1-9).
	•	Translate the input into board coordinates.
	•	Update the board with ‘X’ for Player 1 after their move.
	•	Display the updated board after each move.
	3.	Checkpoint 3: Alternating Turns
	•	Introduce alternating turns between Player 1 (‘X’) and Player 2 (‘O’).
	•	Ensure players cannot overwrite cells that are already occupied.
	•	Switch turns after every valid move.
	4.	Checkpoint 4: Checking for Winning Conditions
	•	Add logic to check for a winner after each move:
	•	Check rows, columns, and diagonals for three matching marks.
	•	Announce the winner when a player gets three in a row.
	•	If all cells are filled without a winner, declare a draw.

By following these steps, you progressively build the game, ensuring it is functional, interactive, and easy to understand at each stage.


===============
Ah, I see! You want to build the Tic-Tac-Toe game step by step, introducing features progressively. Here’s how you can break it down, starting from a very basic version of the game and adding complexity at each checkpoint:

Step-by-Step Game Development Process:

Checkpoint 1: Displaying the Board

The first step is just to display the board in its initial state without any logic for player turns or input.

Code (Checkpoint 1: Displaying the Board Only)

#include <iostream>
using namespace std;

char board[3][3] = {{'1', '2', '3'},
                    {'4', '5', '6'},
                    {'7', '8', '9'}};

void displayBoard() {
    cout << "\n\nTic-Tac-Toe Board: \n\n";
    cout << "Player 1 [X] - Player 2 [O]\n\n";
    cout << "     |     |     \n";
    cout << "  " << board[0][0] << "  |  " << board[0][1] << "  |  " << board[0][2] << " \n";
    cout << "_____|_____|_____\n";
    cout << "     |     |     \n";
    cout << "  " << board[1][0] << "  |  " << board[1][1] << "  |  " << board[1][2] << " \n";
    cout << "_____|_____|_____\n";
    cout << "     |     |     \n";
    cout << "  " << board[2][0] << "  |  " << board[2][1] << "  |  " << board[2][2] << " \n";
    cout << "     |     |     \n\n";
}

int main() {
    displayBoard(); // Only display the board
    return 0;
}

Goal: At this stage, you can only display the board with the initial numbers as placeholders.

Checkpoint 2: Collecting Player Input

Next, you’ll start allowing players to make their moves. You’ll collect the player’s input for their move (choose a number between 1-9), but for now, we won’t check for valid or invalid input.

Code (Checkpoint 2: Collecting Player Input)

#include <iostream>
using namespace std;

char board[3][3] = {{'1', '2', '3'},
                    {'4', '5', '6'},
                    {'7', '8', '9'}};

int choice;
int row, col;

void displayBoard() {
    cout << "\n\nTic-Tac-Toe Board: \n\n";
    cout << "Player 1 [X] - Player 2 [O]\n\n";
    cout << "     |     |     \n";
    cout << "  " << board[0][0] << "  |  " << board[0][1] << "  |  " << board[0][2] << " \n";
    cout << "_____|_____|_____\n";
    cout << "     |     |     \n";
    cout << "  " << board[1][0] << "  |  " << board[1][1] << "  |  " << board[1][2] << " \n";
    cout << "_____|_____|_____\n";
    cout << "     |     |     \n";
    cout << "  " << board[2][0] << "  |  " << board[2][1] << "  |  " << board[2][2] << " \n";
    cout << "     |     |     \n\n";
}

void playerTurn() {
    cout << "Player 1 [X], choose a number: ";
    cin >> choice;
    
    // Translate choice to row and column
    switch(choice) {
        case 1: row = 0; col = 0; break;
        case 2: row = 0; col = 1; break;
        case 3: row = 0; col = 2; break;
        case 4: row = 1; col = 0; break;
        case 5: row = 1; col = 1; break;
        case 6: row = 1; col = 2; break;
        case 7: row = 2; col = 0; break;
        case 8: row = 2; col = 1; break;
        case 9: row = 2; col = 2; break;
        default:
            cout << "Invalid move! Try again.\n";
            playerTurn();  // Retry if input is invalid
            return;
    }

    board[row][col] = 'X';  // Player 1's turn, placing X
}

int main() {
    displayBoard();
    playerTurn(); // Allow player to make a move
    displayBoard(); // Display the board after the move
    return 0;
}

Goal: Players can choose a cell (1-9) and place ‘X’ on the board. The board updates after each move.

Checkpoint 3: Alternating Turns

Now we’ll alternate between Player 1 (X) and Player 2 (O), ensuring that each player takes their turn.

Code (Checkpoint 3: Alternating Turns)

#include <iostream>
using namespace std;

char board[3][3] = {{'1', '2', '3'},
                    {'4', '5', '6'},
                    {'7', '8', '9'}};

int choice;
int row, col;
char turn = 'X'; // Player 1 starts

void displayBoard() {
    cout << "\n\nTic-Tac-Toe Board: \n\n";
    cout << "Player 1 [X] - Player 2 [O]\n\n";
    cout << "     |     |     \n";
    cout << "  " << board[0][0] << "  |  " << board[0][1] << "  |  " << board[0][2] << " \n";
    cout << "_____|_____|_____\n";
    cout << "     |     |     \n";
    cout << "  " << board[1][0] << "  |  " << board[1][1] << "  |  " << board[1][2] << " \n";
    cout << "_____|_____|_____\n";
    cout << "     |     |     \n";
    cout << "  " << board[2][0] << "  |  " << board[2][1] << "  |  " << board[2][2] << " \n";
    cout << "     |     |     \n\n";
}

void playerTurn() {
    cout << "Player " << (turn == 'X' ? "1 [X]" : "2 [O]") << ", choose a number: ";
    cin >> choice;

    // Translate choice to row and column
    switch(choice) {
        case 1: row = 0; col = 0; break;
        case 2: row = 0; col = 1; break;
        case 3: row = 0; col = 2; break;
        case 4: row = 1; col = 0; break;
        case 5: row = 1; col = 1; break;
        case 6: row = 1; col = 2; break;
        case 7: row = 2; col = 0; break;
        case 8: row = 2; col = 1; break;
        case 9: row = 2; col = 2; break;
        default:
            cout << "Invalid move! Try again.\n";
            playerTurn();  // Retry if input is invalid
            return;
    }

    if (board[row][col] != 'X' && board[row][col] != 'O') {
        board[row][col] = turn;  // Place the player's mark
    } else {
        cout << "The cell is already occupied. Try again.\n";
        playerTurn();  // Retry if the cell is occupied
        return;
    }

    // Switch turns
    turn = (turn == 'X') ? 'O' : 'X';
}

int main() {
    displayBoard();
    for (int i = 0; i < 9; i++) {  // Maximum of 9 turns
        playerTurn();
        displayBoard();
    }
    return 0;
}

Goal: Now the game alternates between Player 1 (X) and Player 2 (O). Both players can take turns choosing their moves, and the board updates after each turn.

Checkpoint 4: Checking for Winning Conditions

In this step, you’ll add a function to check for a winner after each move.

Code (Checkpoint 4: Checking for Winner)

#include <iostream>
using namespace std;

char board[3][3] = {{'1', '2', '3'},
                    {'4', '5', '6'},
                    {'7', '8', '9'}};

int choice;
int row, col;
char turn = 'X'; // Player 1 starts

void displayBoard() {
    // Display logic remains the same
}

void playerTurn() {
    // Input logic remains the same
}

bool checkWinner() {
    // Rows, Columns, Diagonals
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) return true;
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) return true;
    }
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) return true;
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) return true;

    return false;
}

int main() {
    displayBoard();
    for (int i = 0; i < 9; i++) {  // Maximum of 9 turns
        playerTurn();
        displayBoard();
        if (checkWinner()) {
            cout << "Player " << (turn == 'X' ? "2 [O]" : "1 [X]") << " wins!\n";
            return 0;
        }
    }
    cout << "It's a draw!\n";
    return 0;
}

Goal: Players can now win if they get three in a row (horizontally, vertically, or diagonally), and the game announces the winner.

By following these checkpoints, you gradually build the game while introducing each concept to the players or students logically and interactively.